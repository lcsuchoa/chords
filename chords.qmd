---
title: "chords"
format: html
editor: visual
---

```{r include=F}
# devtools::install_github("r-music/chorrrds")
require(chorrrds)
require(tidyverse)
require(rvest)
require(ggridges)
require(tictoc)
require(tidytext)
require(forcats)
require(caTools)
require(class)
source("utils.R")
```

```{r include=F}
top_genres <- c("rock", "gospelreligioso", "sertanejo", "mpb", "alternativo",
             "axe", "funk", "pop", "poprock", "samba")

top_songs <- top_genres %>%
  purrr::map(~{
    .x %>% 
      paste0("https://www.cifraclub.com.br/mais-acessadas/", .) %>% 
      read_html() %>% 
      html_nodes("a") %>%
      html_attr("href") %>% 
      .[30:119] %>%
      cbind.data.frame(url = ., 
                       genre = .x,
                       ranking = 1:90)
  }) %>%
  purrr::reduce(rbind) %>%
  mutate(genre = gsub("gospelreligioso", "gospel", genre))

top_songs$artist <- sub("^/(.*?)/.*$", "\\1", top_songs$url) %>%
  gsub("-", " ", .) %>%
  gsub("(^|\\s)([a-z])", "\\1\\U\\2", ., perl=T)

top_songs$song <- sub("^/.*?/(.*)/$", "\\1", top_songs$url) %>%
  gsub("-", " ", .) %>%
  gsub("(^|\\s)([a-z])", "\\1\\U\\2", ., perl=T)
```

```{r include=F}
# esse chunk demora bastante para rodar
tic()
chords <- read_chords(top_songs)
toc()
```

```{r include=F}
chords <- chords %>%
  filter(!is.na(artist)) %>%
  transpose_capo(.) %>%
  transpose_chords(.)
```

# Análise exploratória

#### Quantidade de músicas por gênero

```{r echo=F}
aux <- chords %>%
  select(song, artist) %>% 
  unique()

left_join(aux, top_songs, by=c("song", "artist")) %>%
  group_by(genre) %>%
  na.omit() %>%
  unique() %>%
  count(genre) %>%
  arrange(n, genre)
```

<br>

#### Top 20 músicas com mais acordes distintos

```{r echo=F}
chords %>% 
  group_by(song, chord) %>% 
  summarise(distintos = n_distinct(chord)) %>% 
  summarise(cont = n()) %>% 
  mutate(song = fct_reorder(song, cont)) %>% 
  top_n(n = 20) %>% 
  ggplot(aes(y = cont, x = song)) +
  geom_bar(colour = 'dodgerblue4', fill = 'darksalmon',
           size = 0.5, alpha = 0.6, stat = "identity") +
  labs(x = 'Songs', y = 'Counts') +
  coord_flip() +
  theme_bw(14)
```

<br>

#### [WIP] Densidade de extracted features

```{r echo=F}
feat_chords <- chords %>%
  select(chord, song) %>% 
  feature_extraction() %>% 
  select(-chord) %>% 
  group_by(song) %>% 
  summarise_all(mean)

dt <- feat_chords %>% 
  gather(group, vars, minor, seventh, 
         seventh_M, sixth, fifth_dim, fifth_aug, 
         fourth, ninth, bass, dimi, augm)

dt$group <- forcats::lvls_revalue(
  dt$group,
  c("Augmented", "Bass", "Diminished",
    "Augm. Fifth", "Dimi. Fifth",
    "Fourth", "Minor", "Ninth", "Seventh",
    "Major Seventh", "Sixth"))

dt %>% 
  ggplot(aes(vars, group, fill = group)) +
  geom_density_ridges(alpha = 0.6) +
  scale_fill_cyclical(values = c("dodgerblue4", "darksalmon")) +
  guides(fill = FALSE) +
  xlim(0, 1) +
  labs(x = "Densities", y = "extracted features") +
  theme_bw(14)
```

<br>

#### Quantidade média de acordes distintos por gênero

```{r echo=F}
aux <- chords %>% 
  group_by(song, chord) %>% 
  summarise(distintos = n_distinct(chord)) %>% 
  summarise(cont = n()) %>% 
  mutate(song = fct_reorder(song, cont))

left_join(aux, top_songs, by="song") %>%
  group_by(genre) %>%
  na.omit() %>%
  summarise(cont = round(mean(cont), 2)) %>%
  ggplot(aes(y = cont, reorder(genre, -cont, decreasing=T))) +
  geom_bar(colour = 'dodgerblue4', fill = 'darksalmon',
           size = 0.5, alpha = 0.6, stat = "identity") +
  labs(x = 'genres', y = 'Counts') +
  coord_flip() +
  theme_bw(14)
```

<br>

#### Top 5 acordes mais frequentes por gênero

```{r echo=F}
aux <- chords %>%
  group_by(song) %>% 
  count(chord)

left_join(aux, top_songs, by="song") %>%
  group_by(genre) %>%
  na.omit() %>%
  count(chord) %>%
  mutate(prop = scales::percent(n/sum(n))) %>%
  top_n(n, n = 5) %>%
  arrange(genre, desc(n))
```

<br>

#### Top 2 transições mais frequentes por gênero

```{r echo=F}
aux <- chords %>%
  split(.$song) %>% 
  map(chords_ngram, n = 2) %>% 
  bind_rows() %>% 
  group_by(song)

left_join(aux, top_songs, by="song") %>% 
  group_by(genre) %>%
  na.omit() %>%
  count(chords_ngram, key) %>%
  mutate(prop = scales::percent(n/sum(n), 2)) %>%
  top_n(n, n = 2) %>%
  arrange(genre, desc(n))
```

<br>

#### Top 2 progressões mais frequentes por gênero

```{r echo=F}
aux <- chords %>%
  split(.$song) %>% 
  map(chords_ngram, n = 4) %>% 
  bind_rows() %>% 
  group_by(song)

left_join(aux, top_songs, by="song") %>% 
  group_by(genre) %>%
  na.omit() %>%
  count(chords_ngram) %>%
  mutate(prop = scales::percent(n/sum(n), 2)) %>%
  top_n(n, n = 2) %>%
  arrange(genre, desc(n))
```

<br>

#### Top 2 tonalidades mais frequentes por gênero

```{r echo=F}
aux <- chords %>%
  group_by(song) %>%
  count(key)

left_join(aux, top_songs, by="song") %>% 
  group_by(genre) %>%
  na.omit() %>%
  count(key) %>% 
  mutate(prop = scales::percent(n/sum(n), 2)) %>%
  top_n(n, n = 2) %>%
  arrange(genre, desc(n))
```

<br>

#### [WIP] Proporção de acordes maiores e menores por gênero

```{r echo=F}
aux <- chords %>%
  select(chord, song) %>% 
  feature_extraction() %>% 
  select(-chord) %>% 
  group_by(song) %>% 
  summarise_all(mean)

left_join(aux, top_songs, by="song") %>% 
  group_by(genre) %>%
  na.omit() %>%
  summarise(minor = round(mean(minor), 2)) %>%
  mutate(major = 1 - minor) %>%
  arrange(desc(minor))
```

<br>

# Análise exploratória após padronização de tom

#### Quantidade de acordes distintos por gênero

```{r echo=F}
aux <- chords %>% 
  group_by(song, chordC) %>% 
  summarise(distintos = n_distinct(chordC)) %>% 
  summarise(cont = n()) %>% 
  mutate(song = fct_reorder(song, cont))

left_join(aux, top_songs, by="song") %>%
  group_by(genre) %>%
  na.omit() %>%
  summarise(cont = round(mean(cont), 2)) %>%
  ggplot(aes(y = cont, reorder(genre, -cont, decreasing=T))) +
  geom_bar(colour = 'dodgerblue4', fill = 'darksalmon',
           size = 0.5, alpha = 0.6, stat = "identity") +
  labs(x = 'genres', y = 'Counts') +
  coord_flip() +
  theme_bw(14)
```

<br>

#### Top 5 acordes mais frequentes por gênero

```{r echo=F}
aux <- chords %>%
  group_by(song) %>% 
  count(chordC)

left_join(aux, top_songs, by="song") %>%
  group_by(genre) %>%
  na.omit() %>%
  count(chordC) %>%
  mutate(prop = scales::percent(n/sum(n))) %>%
  top_n(n, n = 5)
```

<br>

```{r include=F}
chordsC <- chords %>%
  mutate(chord = chordC) %>%
  mutate(key = keyC) %>%
  select(-c(chordC, keyC))
```

#### Top 2 transições mais frequentes por gênero

```{r echo=F}
aux <- chordsC %>%
  split(.$song) %>% 
  map(chords_ngram, n = 2) %>% 
  bind_rows() %>% 
  group_by(song)

left_join(aux, top_songs, by="song") %>% 
  group_by(genre) %>%
  na.omit() %>%
  count(chords_ngram) %>%
  mutate(prop = scales::percent(n/sum(n), 2)) %>%
  top_n(n, n = 2) %>%
  arrange(genre, desc(n))
```

<br>

#### Top 2 progressões mais frequentes por gênero

```{r echo=F}
aux <- chordsC %>%
  split(.$song) %>% 
  map(chords_ngram, n = 4) %>% 
  bind_rows() %>% 
  group_by(song) %>%
  filter(str_count(chords_ngram, " ") == 3)

left_join(aux, top_songs, by="song") %>% 
  group_by(genre) %>%
  na.omit() %>%
  count(chords_ngram) %>%
  mutate(prop = scales::percent(n/sum(n), 2)) %>%
  top_n(n, n = 2) %>%
  arrange(genre, desc(n))
```

<br>

# TF-IDF

```{r echo=F}
aux <- chordsC %>%
  split(.$song) %>% 
  map(chords_ngram, n = 4) %>% 
  bind_rows() %>% 
  group_by(song) %>%
  filter(str_count(chords_ngram, " ") == 3) %>%
  mutate(chords_ngram = gsub(" ", "-", chords_ngram))

prep_genre <- left_join(aux, top_songs, by="song") %>% 
  group_by(genre) %>%
  select(chords_ngram) %>%
  count(genre, chords_ngram) %>%
  arrange(genre, desc(n))

prep_total <- prep_genre %>% 
  group_by(genre) %>%
  summarize(total = sum(n))

tfidf_genre <- left_join(prep_genre, prep_total) %>%
  bind_tf_idf(chords_ngram, genre, n) %>%
  arrange(desc(tf_idf))

tfidf_genre
```

```{r}
tfidf_genre %>%
  group_by(genre) %>%
  slice_max(tf_idf, n = 3) %>%
  ungroup() %>%
  ggplot(aes(tf_idf, fct_reorder(chords_ngram, tf_idf), fill = genre)) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~genre, ncol = 2, scales = "free") +
  # shared axis
  labs(x = "tf-idf", y = NULL)
```

<br>

# KNN

## Esboço

```{r}
# arrumar para músicas com mesmo nome

aux <- chordsC %>%
  split(.$song) %>% 
  map(chords_ngram, n = 4) %>% 
  bind_rows() %>% 
  group_by(song) %>%
  filter(str_count(chords_ngram, " ") == 3) %>%
  mutate(chords_ngram = gsub(" ", "-", chords_ngram))

prep_song <- left_join(aux, top_songs, by="song") %>% 
  group_by(song, artist.x) %>%
  select(chords_ngram) %>%
  count(song, chords_ngram) %>%
  arrange(desc(n))

prep_total <- prep_song %>% 
  group_by(song) %>%
  summarize(total = sum(n)) %>%
  arrange(desc(total))

tfidf_song <- left_join(prep_song, prep_total) %>%
  bind_tf_idf(chords_ngram, song, n) %>%
  arrange(desc(tf_idf))

tfidf_song
```

concatenar artista com música

criar um vetor pra cada música
coluna vai ser progressão
linhas vão ser as músicas
calcular a dist do vetor de tf-idf

tidyr pivot_wider

```{r}
set.seed(1209)
split = sample.split(tfidf_song$tf_idf, SplitRatio = 0.75)
train = subset(tfidf_song, split == TRUE)
test = subset(tfidf_song, split == FALSE)
```

```{r}
pred <- knn(
  train = train,
  test = test,
  cl = train$genre,
  k = 10
)
```

```{r}
sum(is.na(train))
sum(is.na(test))
```

--------------------------------------------------------------------------------

```{r}
aux <- chordsC %>%
  split(.$song) %>% 
  map(chords_ngram, n = 4) %>% 
  bind_rows() %>% 
  group_by(song) %>%
  filter(str_count(chords_ngram, " ") == 3)

ngrams <- left_join(aux, top_songs, by="song") %>%
  group_by(song, artist.x, genre) %>%
  na.omit() %>%
  summarize(cat = paste(chords_ngram, collapse=", "))
```

```{r}
stringdist(ngrams$cat[1], ngrams$cat[2], method= "lv")
```

```{r}
set.seed(1209)
split = sample.split(ngrams$cat, SplitRatio = 0.75)
train = subset(ngrams, split == TRUE)
test = subset(ngrams, split == FALSE)
```

```{r}
pred <- knn(
  train = train,
  test = test,
  cl = train$cat,
  k = 10
)
```

```{r}
sum(is.na(train))
sum(is.na(test))
```


```{r}
(cm <- table(test$cat, pred))
```

```{r}
accuracy <- sum(diag(cm))/length(test$cat)
sprintf("Accuracy: %.2f%%", accuracy*100)
```


<br>

# Tarefas

- explorar música com progressão
- buscar pelo nome da música no chords

- explorar KNN
- talvez usar TF IDF

- quarto pub
- começar para semana que vem

<br>
<br>
<br>

# Análises descartadas

#### Top 3 acordes mais frequentes por música

```{r echo=F}
chords %>% 
  group_by(song) %>% 
  count(chord) %>%
  mutate(prop = scales::percent(n/sum(n))) %>%
  top_n(n, n = 3) %>%
  arrange(song, desc(n))
```

<br>

#### Top 2 transições mais frequentes por música

```{r echo=F}
chords %>%
  split(.$song) %>% 
  map(chords_ngram, n = 2) %>% 
  bind_rows() %>% 
  group_by(song) %>% 
  count(chords_ngram) %>% 
  mutate(prop = scales::percent(n/sum(n))) %>%
  top_n(n, n = 2) %>%
  arrange(song, desc(n))
```

<br>

#### [WIP] Proporção de acordes simples e complexos por gênero

```{r echo=F}
aux <- chords %>%
  select(chord, song) %>% 
  feature_extraction() %>% 
  select(-chord) %>% 
  group_by(song) %>% 
  summarise_all(mean) %>%
  mutate(complex = dimi + augm + sus + seventh + seventh_M + sixth + fourth +
           sixth + fourth + fifth_aug + fifth_dim + ninth + bass)

left_join(aux, top_songs, by="song") %>% 
  group_by(genre) %>%
  na.omit() %>%
  summarise(complex = round(mean(complex), 2)) %>%
  mutate(simple = 1 - complex) %>%
  arrange(desc(complex))
```

